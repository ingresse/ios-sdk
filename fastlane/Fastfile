default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Push to Dev branch"
  lane :to_dev do
    # Update local
    sh "git remote update"
    branch = git_branch()

    get_development_branch

    # Merge new branch
    sh "git merge --no-ff " + branch

    # Push to origin
    if UI.confirm("Push to origin?")
      sh "git push origin development"
    end

    # Return to branch
    sh "git checkout " + branch
  end

  desc "Get most recent development branch"
  private_lane :get_development_branch do
    sh "git checkout development"
    sh "git reset origin/development --hard"
  end

  desc "Release new version"
  lane :release do |options|
    version = options[:version]

    if version == "" || version == "null"
      UI.user_error!("Versão inválida, insira o parâmetro de versão usando version:\"<versão>\"")
    end

    get_development_branch
    test

    # Check lint local
    pod_lib_lint(
      verbose: false,
      use_bundle_exec: false
    )

    # Create release branch
    sh "git checkout -b release/" + version

    # Commit version
    commit_version_bump(
      message: "Increase version number (" + version + ")",
      xcodeproj: "IngresseSDK.xcodeproj",
      include: %w[IngresseSDK.podspec],
      force: true
    )

    # Push release branch
    push_to_git_remote(
      remote: 'origin',
      local_branch: "release/" + version,
      remote_branch: "release/" + version,
      force: false
    )

    # Get changelog
    changelog = changelog_from_git_commits(
      between: [last_git_tag, "HEAD"],
      pretty: "- (%h) %s",
      date_format: "short",
      merge_commit_filtering: "exclude_merges"
    )

    # Create PR to master
    pull_request = create_pull_request(
      repo: "ingresse/ios-sdk",
      title: "Release - " + version,
      body: "New release - generated by fastlane \n" + changelog
    )

    # Create release
    set_github_release(
      repository_name: "ingresse/ios-sdk",
      api_token: ENV["GITHUB_TOKEN"],
      tag_name: version,
      commitish: "release/" + version,
      name: "Release " + version,
      description: "Changelog: \n" + changelog,
      is_draft: false,
      is_prerelease: false
    )

    # Pod spec lint
    pod_lib_lint(
      verbose: false,
      use_bundle_exec: false,
      sources: [pull_request]
    )

    # Push to cocoapods
    pod_push(
      path: "IngresseSDK.podspec",
      use_bundle_exec: false
    )

    # Notify on Slack
    slack(
      message: "Release do SDK iOS no CocoaPods!",
      channel: "#fastlane",
      payload: { 
        "Versão" => version,
        "Link" => "https://cocoapods.org/pods/IngresseSDK",
      },
      default_payloads: [:git_branch]
    )
  end

  desc "Run Tests with coverage"
  lane :tests do
    scan(scheme: "IngresseSDK",
      code_coverage: true,
      derived_data_path: "DerivedData")
    slather(build_directory: "DerivedData",
      scheme: "IngresseSDK",
      proj: "IngresseSDK.xcodeproj",
      coveralls: true,
      simple_output: true)
  end

  desc "Run Tests"
  lane :test do
    swiftlint
    scan(scheme: "IngresseSDK",
      code_coverage: true,
      derived_data_path: "DerivedData")
  end

  desc "Increment Major Version"
  lane :increment_major do
    increment_version_number(
      bump_type: "major"
    )
  end

  desc "Create new pod release"
  lane :create_pod_release do |options|
    version = options[:version]

    if version == "" || version == nil
      UI.user_error!("Versão inválida, insira o parâmetro de versão usando version:\"<versão>\"")
    end

    test

    # Check lint local
    pod_lib_lint(
      verbose: false,
      use_bundle_exec: false
    )

    # Create release branch
    sh "git checkout -b release/" + version

    # Bump version
    version_bump_podspec(
      path: "IngresseSDK.podspec",
      version_number: version
    )

    # Commit version
    commit_version_bump(
      message: "Increase version number (" + version + ")",
      xcodeproj: "IngresseSDK.xcodeproj",
      include: %w[IngresseSDK.podspec],
      force: true
    )

    # Push release branch
    push_to_git_remote(
      remote: 'origin',
      local_branch: "release/" + version,
      remote_branch: "release/" + version,
      force: false
    )
  end

  desc "Get changelog from master"
  lane :changelog_from_master do
    changelog_from_git_commits(
      between: ["origin/master", "HEAD"],
      pretty: "- (%h) %s",
      date_format: "short",
      merge_commit_filtering: "exclude_merges"
    )
  end

  desc "Push sdk to cocoapods"
  lane :push_to_cocoapods do
    # Push to cocoapods
    result = pod_push(
      path: "IngresseSDK.podspec",
      use_bundle_exec: false
    )
  end

  desc "Send message to slack"
  lane :notify_slack do
    # Notify on Slack
    slack(
      message: "Release do SDK iOS no CocoaPods!",
      channel: "#fastlane",
      slack_url: "https://hooks.slack.com/services/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",
      fail_on_error: false,
      payload: {
        "Versão" => ENV["RELEASE_TAG"],
        "Link" => "https://cocoapods.org/pods/IngresseSDK",
      },
      default_payloads: [:git_branch]
    )
  end
end